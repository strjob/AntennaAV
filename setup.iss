; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Antenna"
#define MyAppVersion "1.0.4"
#define MyAppPublisher "ЭнеригияЛаб"
#define MyAppExeName "AntennaAV.exe"

[Setup]
AppId={{CD582AE9-D7AA-48AF-BF82-4A642B2B315B}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={pf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
SetupIconFile=C:\Users\User11\source\repos\AntennaAV\antenna_icon.ico
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
DisableProgramGroupPage=yes
; Укажите LicenseFile, если есть реальный файл лицензии
; LicenseFile=C:\Users\User11\License.txt
PrivilegesRequired=admin
OutputBaseFilename=AntennaAVSetup
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\User11\source\repos\AntennaAV\bin\Release\net8.0\win-x64\publish\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs; Excludes: "*.pdb"
Source: "C:\Users\User11\source\repos\AntennaAV\antenna_icon.ico"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\antenna_icon.ico"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\antenna_icon.ico"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{CD582AE9-D7AA-48AF-BF82-4A642B2B315B}_is1';
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

function InitializeSetup(): Boolean;
var
  iResultCode: Integer;
  sUnInstallString: String;
  MsgResult: Integer;
begin
  Result := True;  // По умолчанию продолжаем установку

  // Проверяем, установлена ли программа
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then
  begin
    MsgBox('Uninstall найден: ' + sUnInstallString, mbInformation, MB_OK);  // Лог: показывает, нашёл ли uninstall
    // Программа найдена — показываем варианты
    MsgResult := MsgBox('Программа уже установлена. Выберите действие:' + #13#13 +
                        'Да — Обновить (удалить старую и установить новую)' + #13 +
                        'Нет — Удалить (uninstall и завершить)' + #13 +
                        'Отмена — Прервать установку', mbConfirmation, MB_YESNOCANCEL);

    sUnInstallString := RemoveQuotes(sUnInstallString);

    if MsgResult = IDYES then  // Обновить: тихий uninstall, затем установка
    begin
      Exec(sUnInstallString, '/SILENT /NORESTART', '', SW_HIDE, ewWaitUntilTerminated, iResultCode);
      Result := True;  // Продолжаем установку
    end
    else if MsgResult = IDNO then  // Удалить: обычный uninstall, затем выход
    begin
      Exec(sUnInstallString, '/NORESTART', '', SW_SHOW, ewWaitUntilTerminated, iResultCode);
      Result := False;  // Прерываем установку
    end
    else  // Отмена
      Result := False;  // Прерываем установку
  end;
  else
  begin
    MsgBox('Uninstall НЕ найден. Программа не установлена или ключ реестра отсутствует.', mbInformation, MB_OK);  // Лог: если не нашёл
  end;
end;